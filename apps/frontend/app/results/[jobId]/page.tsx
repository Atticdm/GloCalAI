"use client";

import { ExternalLink, Loader2, PlayCircle, Youtube } from "lucide-react";
import Link from "next/link";
import { useParams } from "next/navigation";
import * as React from "react";
import useSWR from "swr";

import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { useToast } from "@/components/ui/use-toast";
import { HlsPlayer } from "@/components/dashboard/hls-player";
import { getJob, getVariantDownload, publishToYoutube, type LocalizationJob } from "@/lib/api";
import { useAuth } from "@/hooks/use-auth";

export default function ResultsPage() {
  const params = useParams<{ jobId: string }>();
  const jobId = params.jobId;
  const toast = useToast();
  const { token } = useAuth();
  const { data: job } = useSWR<LocalizationJob>(jobId ? ["job", jobId, "results"] : null, () => getJob(jobId));
  const [publishing, setPublishing] = React.useState<string | null>(null);
  const [downloading, setDownloading] = React.useState<string | null>(null);

  if (!job) {
    return (
      <div className="flex min-h-[60vh] items-center justify-center text-slate-400">
        <Loader2 className="mr-2 h-5 w-5 animate-spin" /> Loading job results...
      </div>
    );
  }

  const onDownload = async (variantId: string) => {
    setDownloading(variantId);
    try {
      const { mp4, srt } = await getVariantDownload(variantId);
      if (mp4) {
        window.open(mp4, "_blank");
      }
      if (srt) {
        window.open(srt, "_blank");
      }
      toast({ title: "Download started" });
    } catch (error) {
      console.error(error);
      toast({ title: "Download failed", description: "Unable to retrieve pre-signed links" });
    } finally {
      setDownloading(null);
    }
  };

  const onPublish = async (variantId: string, lang: string) => {
    setPublishing(variantId);
    try {
      const youtubeUrl = await publishToYoutube(variantId, {
        title: `${job.project_id} ${lang} localized demo`,
        description: "Localized output generated by Glocal Ads AI.",
        tags: ["glocal", lang, "localization"],
      });
      toast({ title: "Upload simulated", description: youtubeUrl });
    } catch (error) {
      console.error(error);
      toast({ title: "YouTube upload failed", description: "Check emulated service" });
    } finally {
      setPublishing(null);
    }
  };

  return (
    <div className="space-y-8">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-semibold">Localization results</h1>
          <p className="text-sm text-slate-400">Job {job.id}</p>
        </div>
        <Button variant="outline" asChild>
          <Link href={`/projects/${job.project_id}`}>Back to project</Link>
        </Button>
      </div>

      <div className="grid gap-6 md:grid-cols-2">
        {job.variants.map((variant) => (
          <Card key={variant.id}>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Badge>{variant.lang}</Badge>
                <span className="text-sm text-slate-400">Status: {variant.status}</span>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {variant.preview_url && token ? (
                <HlsPlayer src={`${process.env.NEXT_PUBLIC_API_URL}/variants/${variant.id}/preview?token=${token}`} />
              ) : (
                <div className="flex h-48 items-center justify-center rounded-lg border border-slate-800 bg-slate-900/40 text-sm text-slate-400">
                  <PlayCircle className="mr-2 h-5 w-5" /> Preview not ready yet
                </div>
              )}
              <div className="flex flex-wrap gap-3">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => onDownload(variant.id)}
                  disabled={downloading === variant.id}
                >
                  {downloading === variant.id ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <ExternalLink className="mr-2 h-4 w-4" />}
                  Download MP4 & SRT
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => onPublish(variant.id, variant.lang)}
                  disabled={publishing === variant.id}
                >
                  {publishing === variant.id ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Youtube className="mr-2 h-4 w-4" />}
                  Publish to YouTube
                </Button>
              </div>
              {variant.report ? (
                <div className="rounded-lg border border-slate-800 bg-slate-900/40 p-3 text-xs text-slate-400">
                  <p className="mb-2 text-slate-200">QC report</p>
                  <pre className="overflow-x-auto text-xs text-slate-300">{JSON.stringify(variant.report, null, 2)}</pre>
                </div>
              ) : null}
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
}
