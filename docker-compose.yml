version: "3.9"

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: glocal_db
      POSTGRES_USER: glocal_user
      POSTGRES_PASSWORD: strongpass123
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U glocal_user"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "6379:6379"

  rabbitmq:
    image: rabbitmq:3.12-management
    environment:
      RABBITMQ_DEFAULT_USER: glocal
      RABBITMQ_DEFAULT_PASS: glocalpass
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5672:5672"
      - "15672:15672"

  minio:
    image: minio/minio:RELEASE.2024-01-25T01-54-28Z
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "9000:9000"
      - "9001:9001"

  minio-create-bucket:
    image: minio/mc:RELEASE.2024-01-25T00-17-18Z
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: ["/bin/sh", "-c", "until /usr/bin/mc alias set local http://minio:9000 ${S3_ACCESS_KEY} ${S3_SECRET_KEY}; do sleep 2; done; /usr/bin/mc mb --ignore-existing local/${S3_BUCKET}; /usr/bin/mc anonymous set download local/${S3_BUCKET}"]
    env_file: .env
    restart: "no"

  migrations:
    image: postgres:15-alpine
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./migrations/sql:/migrations:ro
    entrypoint: ["/bin/sh", "-c", "for f in /migrations/*.sql; do echo Running $f; PGPASSWORD=strongpass123 psql -h postgres -U glocal_user -d glocal_db -f $f; done"]
    restart: "no"

  api:
    build:
      context: .
      dockerfile: infrastructure/docker/api.Dockerfile
    env_file: .env
    environment:
      APP_ENV: dev
      LOG_LEVEL: info
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5

  frontend:
    build:
      context: apps/frontend
      dockerfile: ../infrastructure/docker/frontend.Dockerfile
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8080
      NEXT_PUBLIC_MINIO_PUBLIC_URL: http://localhost:9000
    depends_on:
      api:
        condition: service_healthy
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 5

  orchestrator:
    build:
      context: .
      dockerfile: infrastructure/docker/python-service.Dockerfile
      args:
        SERVICE_NAME: orchestrator
    env_file: .env
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f main.py > /dev/null"]
      interval: 30s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  asr-agent:
    build:
      context: .
      dockerfile: infrastructure/docker/python-service.Dockerfile
      args:
        SERVICE_NAME: asr-agent
    env_file: .env
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f main.py > /dev/null"]
      interval: 30s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  translate-agent:
    build:
      context: .
      dockerfile: infrastructure/docker/python-service.Dockerfile
      args:
        SERVICE_NAME: translate-agent
    env_file: .env
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f main.py > /dev/null"]
      interval: 30s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  tts-agent:
    build:
      context: .
      dockerfile: infrastructure/docker/python-service.Dockerfile
      args:
        SERVICE_NAME: tts-agent
    env_file: .env
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f main.py > /dev/null"]
      interval: 30s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  mix-agent:
    build:
      context: .
      dockerfile: infrastructure/docker/python-service.Dockerfile
      args:
        SERVICE_NAME: mix-agent
    env_file: .env
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f main.py > /dev/null"]
      interval: 30s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  subs-agent:
    build:
      context: .
      dockerfile: infrastructure/docker/python-service.Dockerfile
      args:
        SERVICE_NAME: subs-agent
    env_file: .env
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f main.py > /dev/null"]
      interval: 30s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  textinframe-agent:
    build:
      context: .
      dockerfile: infrastructure/docker/python-service.Dockerfile
      args:
        SERVICE_NAME: textinframe-agent
    env_file: .env
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f main.py > /dev/null"]
      interval: 30s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  qc-agent:
    build:
      context: .
      dockerfile: infrastructure/docker/python-service.Dockerfile
      args:
        SERVICE_NAME: qc-agent
    env_file: .env
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f main.py > /dev/null"]
      interval: 30s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  yt-uploader:
    build:
      context: .
      dockerfile: infrastructure/docker/python-service.Dockerfile
      args:
        SERVICE_NAME: yt-uploader
    env_file: .env
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f main.py > /dev/null"]
      interval: 30s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  pg_data:
  minio_data:
